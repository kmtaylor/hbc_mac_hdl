library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity c_to_vhd is
    port (
	cpu_clk, reset : in std_logic;
	io_addr : in vec8_t;
	io_d_out : out vec32_t;
	io_d_in : in vec32_t;
	io_addr_strobe : in std_logic;
	io_read_strobe, io_write_strobe : in std_logic;
	io_ready : out std_logic);
end entity c_to_vhd;

architecture c_to_vhd_arch of c_to_vhd is

    constant COMMA_ADDR  : vec8_t := X"1C";

    signal io_addr_reg : vec8_t;
    signal enabled : std_logic;
    signal do_ack : std_logic;

    signal writing : std_logic;
    signal io_data_reg : vec32_t; 

begin
    
    check_comma : process(writing) begin
    end process check_comma;

    -- Get IO data
    io_proc : process(cpu_clk, reset) begin
	if reset = '1' then
	    --do_ack <= '0';
	    io_data_reg <= (others => '0');
	-- Read IO bus on falling edge
	elsif cpu_clk'event and cpu_clk = '0' then
	    if io_read_strobe = '1' then
		writing <= '0';
		--do_ack <= '1';
	    elsif io_write_strobe = '1' then
		io_data_reg <= io_d_in;
		writing <= '1';
		--do_ack <= '0';
	    else
		--do_ack <= '0';
	    end if;
	end if;
    end process io_proc;

    -- ACK process
    ack_proc : process(cpu_clk, reset) begin
	if reset = '1' then
	    io_ready <= '0';
	    io_d_out <= (others => 'Z');
	elsif cpu_clk'event and cpu_clk = '0' then
	    if enabled = '1' then
		if do_ack = '1' then
		    io_ready <= '1';
		    --io_d_out <= scram_reg;
		else
		    io_ready <= '0';
		    io_d_out <= (others => 'Z');
		end if;
	    end if;
	end if;
    end process ack_proc;

    -- Get address from IO bus
    get_io_addr : process(cpu_clk, reset) begin
	if reset = '1' then
	    io_addr_reg <= (others => '0');
	elsif cpu_clk'event and cpu_clk = '0' then
	    if io_addr_strobe = '1' then
		io_addr_reg <= io_addr;
	    end if;
	end if;
    end process get_io_addr;

    -- Assert enabled
    with io_addr_reg (7 downto 0) select enabled
	<=  '1' when COMMA_ADDR,
	    '0' when others;

end architecture c_to_vhd_arch;
